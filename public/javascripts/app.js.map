{"version":3,"file":"public/javascripts/app.js","sources":["app/components/caption_component.js","app/components/data_pair_y_component.js","app/components/ember_graph_component.js","app/config/-app.js","app/config/-router.js","app/config/-store.js","app/config/env.js","app/controllers/-index_controller.js","app/helpers/caption_helper.js","app/helpers/data_pair_y_helper.js","app/helpers/ember_graph_helper.js","app/initialize.js","app/initializers/namespace.js","app/mixins/core_mixin.js","app/mixins/init_mixin.js","app/mixins/line_mixin.js","app/templates/-application.hbs","app/templates/-index.hbs","app/views/-index_view.js","app/views/data_pair_view.js","app/views/series_view.js","envs/development/env.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtDA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAAA;CCAA;AAAA;AACA;AADA;AAAA;CCAA;AAAA;AACA;AADA;AAAA;CCAA;AAAA;AACA;AADA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzhDA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfzBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AAHA;AAAA","sourcesContent":["EmberGraphs.EmberGraphCaptionComponent = Ember.Component.extend(\n  EmberGraphs.Core, {\n\n  classNameBindings: ['captionClass'],\n  tagName: 'figcaption',\n  layout: Em.Handlebars.compile('{{text}}'),\n\n  captionClass: function() {\n    return this._class('caption');\n  }.property(),\n});\n","EmberGraphs.DataPairYComponent = Em.Component.extend(\n  EmberGraphs.Core, {\n\n  attributeBindings: ['style'],\n  classNameBindings: ['yClass', 'waterfallClass'],\n  tagName: 'dd',\n  layout: Ember.Handlebars.compile('{{point}}'),\n\n  yClass: function() {\n    return this._class('y');\n  }.property(),\n\n  waterfallClass: function() {\n    var waterfall = this.get('graphComponent.waterfallGraph');\n    var point = this.get('point');\n\n    if (waterfall && point && point.toString().indexOf('%') !== -1) {\n      return parseFloat(point) > 0 ? this._class('positive') : this._class('negative');\n    }\n\n    return false;\n  }.property('point', 'graphComponent.waterfallGraph'),\n\n  style: function() {\n    var width = this.get('width');\n    var height = this.get('height');\n    var heightRule = this._cssRule('height', height);\n    var widthRule = this._cssRule('width', width);\n\n    var i = this.get('contentIndex');\n    var left = i * parseFloat(width);\n\n    var leftRule = this._cssRule('left', left + '%');\n\n    return heightRule + widthRule + leftRule;\n  }.property('height', 'width', 'contentIndex'),\n});\n","EmberGraphs.EmberGraphComponent = Em.Component.extend(\n  EmberGraphs.Core,\n  EmberGraphs.Init, {\n\n  // Options\n  prefix: 'eg',\n  fromZero: false,\n  caption: null,\n  type: 'bar',\n  tickDistanceTarget: 50,\n\n  tagName: 'figure',\n  classNameBindings: ['graphClass'],\n  layout: Em.Handlebars.compile('{{view EmberGraphs.SeriesView content=view.parsedData}}{{#if caption}}{{ember-graph-caption text=caption}}{{/if}}'),\n\n  height: null,\n  width: null,\n\n  graphClass: function() {\n    var type = this.get('type');\n    return this._class('graph-' + type);\n  }.property(),\n\n  lineGraph: function() {\n    return this.get('type') === 'line';\n  }.property('type'),\n\n  waterfallGraph: function() {\n    return this.get('type') === 'waterfall';\n  }.property('type'),\n\n  // TODO - Run outside of resize too\n  heightObserver: function() {\n    var _this = this;\n    var height = $(_this.get('element')).height();\n    _this.set('height', height);\n\n    $(_this.get('element')).resize(function() {\n      height = $(_this.get('element')).height();\n      _this.set('height', height);\n    });\n  }.on('didInsertElement'),\n\n  widthObserver: function() {\n    var _this = this;\n    var width = $(_this.get('element')).width();\n    _this.set('width', width);\n\n    $(_this.get('element')).resize(function() {\n      width = $(_this.get('element')).width();\n      _this.set('width', width);\n    });\n  }.on('didInsertElement'),\n});\n","'use strict';\n\nvar config = {\n    LOG_TRANSITIONS: true,\n    LOG_TRANSITIONS_INTERNAL: false\n  };\n\nmodule.exports = Ember.Application.create(config);\n","'use strict';\n\nmodule.exports = App.Router.map(function() {\n    // this.resource('about');\n});\n","'use strict';\n\nmodule.exports = App.Store = DS.Store.extend({\n  revision: 13\n});\n","'use strict';\n\nmodule.exports = (function() {\n  var envObject = {};\n  var moduleNames = window.require.list().filter(function(module) {\n    return new RegExp('^envs/').test(module);\n  });\n\n  moduleNames.forEach(function(module) {\n    var key = module.split('/').reverse()[0];\n    envObject[key] = require(module);\n  });\n\n  return envObject;\n}());\n","App.IndexController = Em.ObjectController.extend({\n\n  // graphData: {\n  //   name: 'seriesName',\n  //   data: [\n  //     {x: 1, y: 30},\n  //     {x: 2, y: 12},\n  //     {x: 3, y: 5},\n  //     {x: 4, y: 11},\n  //     {x: 5, y: 9},\n  //     {x: 6, y: 7},\n  //     {x: 7, y: 12},\n  //     {x: 8, y: 11},\n  //     {x: 9, y: 15},\n  //     {x: 10, y: 11},\n  //   ]\n  // },\n\n  graphData: {\n    name: 'seriesName',\n    data: [\n      {x: 'Impressions', y: 30},\n      {x: 'Clicks', y: 12},\n      {x: 'Q1', y: 11},\n      {x: 'Q2', y: 7},\n      {x: 'Q3', y: 5},\n      {x: 'Claims', y: 3},\n    ]\n  },\n\n});\n","Ember.Handlebars.helper('ember-graph-caption', EmberGraphs.EmberGraphCaptionComponent);\n","Ember.Handlebars.helper('data-pair-y', EmberGraphs.DataPairYComponent);\n","Em.Handlebars.helper('ember-graph', EmberGraphs.EmberGraphComponent);\n","'use strict';\n\nwindow.App = require('config/-app');\nrequire('config/-router');\nrequire('config/-store');\n\n// Load all modules in order automagically. Ember likes things to work this\n// way so everything is in the App.* namespace.\nvar folderOrder = [\n    'initializers', 'mixins', 'routes', 'models',\n    'views', 'controllers', 'components', 'helpers',\n    'templates'\n  ];\n\nfolderOrder.forEach(function(folder) {\n  window.require.list().filter(function(module) {\n    return new RegExp('^' + folder + '/').test(module);\n  }).forEach(function(module) {\n    require(module);\n  });\n});\n\n","// var EmberGraphs;\n\nconsole.log('test');\n\nmodule.exports = EmberGraphs = Ember.Namespace.create({\n  VERSION: '0.1.0',\n});\n","EmberGraphs.Core = Em.Mixin.create({\n\n  graphComponent: function() {\n    var thing = this.nearestOfType(EmberGraphs.EmberGraphComponent);\n    return this.nearestOfType(EmberGraphs.EmberGraphComponent);\n  }.property(),\n\n  _class: function(modifier) {\n    var prefix = this.get('graphComponent.prefix') || this.get('prefix');\n    return prefix + '-' + modifier;\n  },\n\n  _twoDp: function(num) {\n    return Math.round(num * 100) / 100;\n  },\n\n  _cssRule: function(prop, value) {\n    // USAGE - http://modernizr.com/docs/#prefixed\n    var prefixed = Modernizr.prefixed(prop);\n    prop = prefixed ? prefixed.replace(/([A-Z])/g, function(prefixed,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-') : prop;\n\n    return prop + ':' + value + ';';\n  },\n\n});\n","EmberGraphs.Init = Em.Mixin.create({\n\n  parsedData: function() {\n    var data = this.get('series.data');\n    var type = this.get('type');\n    var method = this.get('dataParsingMethods')[type];\n\n    if (method) {\n      return method(this, data);\n    } else {\n      return data;\n    }\n\n  }.property('series.data', 'type'),\n\n  xValues: function() {\n    var data = this.get('series.data');\n    var values = [];\n\n    data.forEach(function(pair) {\n      values.push(pair.x);\n    });\n\n    return values;\n  }.property('series.data').readOnly(),\n\n  yValues: function() {\n    var data = this.get('series.data');\n    var values = [];\n\n    data.forEach(function(pair) {\n      values.push(pair.y);\n    });\n\n    return values;\n  }.property('series.data').readOnly(),\n\n  min: function() {\n    var data = this.get('series.data');\n    var values = this.get('yValues');\n    var fromZero = this.get('fromZero');\n\n    var min = fromZero ? 0 : Math.min.apply(Math, values);\n\n    return min;\n  }.property('series.data').readOnly(),\n\n  max: function() {\n    var data = this.get('series.data');\n    var values = this.get('yValues');\n\n   var max = Math.max.apply(Math, values);\n\n    return max;\n  }.property('series.data').readOnly(),\n\n  dataParsingMethods: {\n    // Add changes inbetween each point to array of objects\n    waterfall: function(view, data) {\n      var parsedData = [];\n      var values = [];\n      var xValues = view.get('xValues');\n      var yValues = view.get('yValues');\n\n      yValues.forEach(function(value, i, arr) {\n        var next = i + 1;\n\n        var x = xValues[i];\n        var nextX = xValues[next];\n        var changeText = x + ' to ' + nextX; // e.g. Impressions to clicks\n\n        var nextY = arr[next];\n        var change = (nextY - value) / value * 100;\n\n        if (!isNaN(change)) {\n          change = Math.round(change) + '%'; // e.g. -60%\n          values.push({x: changeText, y: change});\n        }\n      });\n\n      // Zip arrays\n      for (var i = 0; i < data.length; i++) {\n        parsedData.push(data[i]);\n        parsedData.push(values[i]);\n      }\n\n      return parsedData;\n    },\n  },\n\n});\n","EmberGraphs.Line = Em.Mixin.create({\n  lineStyle: null,\n\n  lineProperties: function() {\n    var _this = this,\n        isLineGraph = this.get('graphComponent.lineGraph'),\n        yValues = this.get('graphComponent.yValues'),\n        contentIndex = this.get('contentIndex'),\n        min = this.get('graphComponent.min'),\n        max = this.get('graphComponent.max');\n\n    var value = this.get('content.y'),\n        nextValue = yValues[contentIndex + 1],\n        difference = value - nextValue;\n\n    var lineHeight = Math.abs(difference) / (max - min) * 100,\n        lineTopOffset = (max - value) / (max - min) * 100;\n\n    // console.log($(this.get('graphComponent.element')).width());\n\n    Em.run.schedule('afterRender', this, function() {\n      var xWidthInPx = $(this.get('element')).width();\n      var graphHeightInPx = $(this.get('graphComponent.element')).height();\n      var differenceHeightInPx = lineHeight / 100 * graphHeightInPx;\n\n      var rotation = Math.atan(xWidthInPx / differenceHeightInPx);\n      var hypothenuseLength = xWidthInPx / Math.sin(rotation) / graphHeightInPx * 100;\n      var transform;\n\n      if (difference < 0) {\n        transform = 'matrix(1, 0, 0, -1, 0, 0) rotate(-' + rotation + 'rad)';\n      } else {\n        transform = 'rotate(-' + rotation + 'rad)';\n      }\n\n      var heightRule = this._cssRule('height', hypothenuseLength + '%');\n      var topRule = this._cssRule('top', lineTopOffset + '%');\n      var transformRule = this._cssRule('transform', transform);\n\n      _this.set('lineStyle', heightRule + topRule + transformRule);\n    });\n\n  }.on('didInsertElement').observes('graphComponent.lineGraph', 'graphComponent.width', 'graphComponent.height'), // TODO - this doesn't work\n\n  lineClass: function() {\n    return this._class('line');\n  }.property(),\n});\n","module.exports = Ember.TEMPLATES['-application'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1;\n\n\n  stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});","module.exports = Ember.TEMPLATES['-index'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(escapeExpression((helper = helpers['ember-graph'] || (depth0 && depth0['ember-graph']),options={hash:{\n    'series': (\"graphData\"),\n    'caption': (\"This is the caption\"),\n    'type': (\"bar\"),\n    'fromZero': (\"true\")\n  },hashTypes:{'series': \"ID\",'caption': \"STRING\",'type': \"STRING\",'fromZero': \"STRING\"},hashContexts:{'series': depth0,'caption': depth0,'type': depth0,'fromZero': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"ember-graph\", options))));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});","App.IndexView = Em.View.extend({\n  templateName: '-index',\n});\n","// X value\nEmberGraphs.DataPairView = Em.View.extend(\n  EmberGraphs.Core,\n  EmberGraphs.Line, {\n\n  attributeBindings: ['style'],\n  classNameBindings: ['xClass'],\n  tagName: 'dt',\n  layout: Em.Handlebars.compile('{{yield}}{{data-pair-y point=view.content.y height=view.height width=view.width contentIndex=view.contentIndex}}'),\n  template: Em.Handlebars.compile(\"<span {{bind-attr class='view.xTickClass'}}>{{view.content.x}}</span>{{#if lineGraph}}<div {{bind-attr class='view.lineClass' style='view.lineStyle'}}></div>{{/if}}\"),\n\n  xClass: function() {\n    return this._class('x');\n  }.property(),\n\n  xTickClass: function() {\n    return this._class('x-tick');\n  }.property(),\n\n  height: function() {\n    var min = this.get('graphComponent.min');\n    var max = this.get('graphComponent.max');\n    var yValues = this.get('graphComponent.yValues');\n    var waterfall = this.get('graphComponent.waterfallGraph');\n    var i = this.get('contentIndex') + 1;\n    var yValue;\n\n    // If waterfall and even number in index that starts at 0 (i.e. It's a change element)...\n    if (waterfall && (i % 2 === 0)) {\n      var pos = i / 2;\n      yValue = yValues[pos];\n    } else {\n      yValue = this.get('content.y');\n    }\n\n    var relativeHeight = (yValue - min) / (max - min) * 100;\n\n\n    return Math.round(relativeHeight * 100) / 100 + '%';\n  }.property('series.data'),\n\n  width: function() {\n    var min = this.get('graphComponent.min');\n    var max = this.get('graphComponent.max');\n    var type = this.get('graphComponent.type');\n    var data = this.get('graphComponent.parsedData');\n\n    var tickOffset = (type === 'line') ? -1 : 0;\n    var relativeWidth = (100 / (data.length + tickOffset));\n\n    return Math.floor(relativeWidth * 100) / 100 + '%';\n  }.property('graphComponent.parsedData'),\n\n  style: function() {\n    var height = this.get('height');\n    var width = this.get('width');\n    var heightRule = this._cssRule('height', height);\n    var widthRule = this._cssRule('width', width);\n\n    return heightRule + widthRule;\n  }.property('height', 'width'),\n\n});\n","EmberGraphs.SeriesView = Em.CollectionView.extend(\n  EmberGraphs.Core, {\n\n  attributeBindings: ['style'],\n  classNameBindings: ['seriesClass'],\n  tagName: 'dl',\n  itemViewClass: EmberGraphs.DataPairView,\n\n  seriesClass: function() {\n    return this._class('series');\n  }.property(),\n\n  style: function() {\n    var target = this.get('graphComponent.tickDistanceTarget');\n    var graphHeight = this.get('graphComponent.height');\n\n    var ticks = Math.floor(graphHeight / target);\n    var tickHeight = graphHeight / ticks;\n    var backgroundSize = '1px ' + tickHeight + 'px';\n    var backgroundSizeRule = this._cssRule('background-size', backgroundSize);\n\n    return backgroundSizeRule;\n  }.property('graphComponent.tickDistanceTarget', 'graphComponent.min', 'graphComponent.max', 'graphComponent.height'),\n\n});\n","'use strict';\n\nmodule.exports = 'development';\n"]}
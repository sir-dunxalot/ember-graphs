@mixin class($class) {
  $class: '#{$prefix}-#{$class}';

  .#{$class} {
    @content;
  }
}

@mixin mod($class_begins_with) {
  $class: '#{$prefix}-#{$class_begins_with}-';

  *[class^='#{$class}'], *[class*='#{$class}'] {
    @content;
  }
}

@function strip_unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip_unit(nth($values, $i)) * 10;
    $pxValues: #{$pxValues + $value}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip_unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}

@mixin color($color) {
  background-color: $color;

  @if (bright($color) == true) {
    color: $darkTextColor;
  } @else {
    color: $lightTextColor;
  }
}

// USAGE - http://en.wikipedia.org/wiki/YIQ
// YIQ takes into account the differences of perception between R, G, and B (red, green, and blue are not perceived equally by the human eye).
// The below mixin normalizes each component of RGB and looks at the brightness/contrast to set the text color
// Color brightness and contrast is explained here - http://www.w3.org/WAI/ER/WD-AERT/#color-contrast
@function bright($color) {
  $yiq: ( (red($color) * 299) + (green($color) * 587) + (blue($color) * 114) ) / 1000;

  // 128 is half of 256 (max brightness as perceived by the human eye)
  // Thus, if backgorund is more than half lightness (closer to 256 than 0), make the text dark
  @if ($yiq >= 128) {
    @return true;
  } @else {
    @return false;
  }
}
